{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"NaiveBayes_multinomial_CLBP","provenance":[],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"4AJ7hhQcyzPp","executionInfo":{"status":"ok","timestamp":1624207428794,"user_tz":-330,"elapsed":3656,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}}},"source":["import cv2\n","import sklearn\n","import numpy as np\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt\n","import math\n","import glob\n","import tensorflow as tf\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.model_selection import train_test_split\n","from matplotlib.image import NonUniformImage\n","from google.colab.patches import cv2_imshow\n","from sklearn.naive_bayes import MultinomialNB\n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"drqGarihy43g","executionInfo":{"status":"ok","timestamp":1624207428799,"user_tz":-330,"elapsed":40,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}}},"source":["def get_pixel(img, center, x, y):\n","    new_value = 0\n","    try:\n","        if img[x][y] >= center:\n","            new_value = 1\n","    except:\n","        pass\n","    return new_value\n"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GJ1y2-nTT2uu","executionInfo":{"status":"ok","timestamp":1624207465810,"user_tz":-330,"elapsed":37043,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}},"outputId":"3274920b-e801-4b62-dd73-48b0d52ef3dc"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"yWca8HLfD-ex","executionInfo":{"status":"ok","timestamp":1624207469670,"user_tz":-330,"elapsed":1210,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}}},"source":["def get_pixel_else_0(l, idx, idy):\n","    if idx < int(len(l)) - 1 and idy < len(l[0]):\n","        return l[idx,idy]\n","    else:\n","        return 0"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"yKcdxthGWDd9","executionInfo":{"status":"ok","timestamp":1624207469674,"user_tz":-330,"elapsed":38,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}}},"source":["def get_pixel_sign(img, center, x, y):\n","    new_value = 0\n","    try:\n","        if img[x][y] >= center:\n","            new_value = 1\n","    except:\n","        pass\n","    return new_value\n"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"S7fBIum0WKHM","executionInfo":{"status":"ok","timestamp":1624207475155,"user_tz":-330,"elapsed":6,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}}},"source":["def get_pixel_magn_diff(img, center, x, y):\n","    new_value = 0\n","    try:\n","        new_value = abs(int(img[x][y]) - int(center))\n","    except:\n","        pass\n","    return new_value\n"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"4fepRS2TzyFt","executionInfo":{"status":"ok","timestamp":1624207476560,"user_tz":-330,"elapsed":11,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}}},"source":["\n","def lbp_calculated_pixel(img, x, y):\n","    '''\n","     64 | 128 |   1\n","    ----------------\n","     32 |   0 |   2\n","    ----------------\n","     16 |   8 |   4    \n","    '''    \n","    center = img[x][y]\n","    val_ar = []\n","    val_ar.append(get_pixel_sign(img, center, x-1, y+1))     # top_right\n","    val_ar.append(get_pixel_sign(img, center, x, y+1))       # right\n","    val_ar.append(get_pixel_sign(img, center, x+1, y+1))     # bottom_right\n","    val_ar.append(get_pixel_sign(img, center, x+1, y))       # bottom\n","    val_ar.append(get_pixel_sign(img, center, x+1, y-1))     # bottom_left\n","    val_ar.append(get_pixel_sign(img, center, x, y-1))       # left\n","    val_ar.append(get_pixel_sign(img, center, x-1, y-1))     # top_left\n","    val_ar.append(get_pixel_sign(img, center, x-1, y))       # top\n","    \n","    power_val = [1, 2, 4, 8, 16, 32, 64, 128]\n","    val = 0\n","    for i in range(len(val_ar)):\n","        val += val_ar[i] * power_val[i]\n","    return val    \n"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"DXvDJw3d5Op0","executionInfo":{"status":"ok","timestamp":1624207476561,"user_tz":-330,"elapsed":10,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}}},"source":["\n","def clbp_sign_vec(img, x, y):\n","    '''\n","     64 | 128 |   1\n","    ----------------\n","     32 |   0 |   2\n","    ----------------\n","     16 |   8 |   4    \n","    '''    \n","    center = img[x][y]\n","    val_ar = []\n","    val_ar.append(get_pixel_sign(img, center, x-1, y+1))     # top_right\n","    val_ar.append(get_pixel_sign(img, center, x, y+1))       # right\n","    val_ar.append(get_pixel_sign(img, center, x+1, y+1))     # bottom_right\n","    val_ar.append(get_pixel_sign(img, center, x+1, y))       # bottom\n","    val_ar.append(get_pixel_sign(img, center, x+1, y-1))     # bottom_left\n","    val_ar.append(get_pixel_sign(img, center, x, y-1))       # left\n","    val_ar.append(get_pixel_sign(img, center, x-1, y-1))     # top_left\n","    val_ar.append(get_pixel_sign(img, center, x-1, y))       # top\n","\n","    power_val = [1, 2, 4, 8, 16, 32, 64, 128]\n","    val = 0\n","    # print(val_ar)\n","    for i in range(len(val_ar)):\n","        val += val_ar[i] * power_val[i]\n","    return val     \n"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"xu6slLAA6rko","executionInfo":{"status":"ok","timestamp":1624207476562,"user_tz":-330,"elapsed":10,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}}},"source":["\n","def clbp_Mag_vec(img, x, y):  \n","    center = img[x][y]\n","    # print(\"center = \",center)\n","\n","    val_ar = []\n","    # print(img[x-1][y+1],\"\\n\")\n","    val_ar.append(get_pixel_magn_diff(img, center, x-1, y+1))     # top_right\n","    # print(\"center = \",center)\n","    # print(img[x-1][y+1],\"\\n\")\n","    \n","    val_ar.append(get_pixel_magn_diff(img, center, x, y+1))       # right\n","    # print(\"center = \",center)\n","    # print(img[x][y+1],\"\\n\")\n","    \n","    val_ar.append(get_pixel_magn_diff(img, center, x+1, y+1))     # bottom_right\n","    # print(\"center = \",center)\n","    # print(img[x+1][y+1],\"\\n\")\n","    \n","    val_ar.append(get_pixel_magn_diff(img, center, x+1, y))       # bottom\n","    # print(\"center = \",center)\n","    # print(img[x+1][y],\"\\n\")\n","    \n","    val_ar.append(get_pixel_magn_diff(img, center, x+1, y-1))     # bottom_left\n","    # print(\"center = \",center)\n","    # print(img[x+1][y-1],\"\\n\")\n","    \n","    val_ar.append(get_pixel_magn_diff(img, center, x, y-1))       # left\n","    # print(\"center = \",center)\n","    # print(img[x][y-1],\"\\n\")\n","    \n","    val_ar.append(get_pixel_magn_diff(img, center, x-1, y-1))     # top_left\n","    # print(\"center = \",center)\n","    # print(img[x-1][y-1],\"\\n\")\n","    \n","    val_ar.append(get_pixel_magn_diff(img, center, x-1, y))       # top\n","    # print(\"center = \",center)\n","    # print(img[x-1][y],\"\\n\")\n","\n","    return val_ar    \n"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"qpCAL6RElG8V","executionInfo":{"status":"ok","timestamp":1624207476563,"user_tz":-330,"elapsed":10,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}}},"source":["def t_paper(x,c):\n","    if(x>=c):\n","        return 1\n","    return 0"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"lN-lJgfyhGan","executionInfo":{"status":"ok","timestamp":1624207476566,"user_tz":-330,"elapsed":11,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}}},"source":["def clbp_S_Operator(img,x,y):\n","    return clbp_sign_vec(img,x,y)"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"T-HbRj_6jqFo","executionInfo":{"status":"ok","timestamp":1624207478008,"user_tz":-330,"elapsed":22,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}}},"source":["def clbp_M_Operator(mp,P):\n","    c_threshold = np.mean(mp)\n","    tp = np.where(mp >= c_threshold, 1, 0)\n","    pp2 = (np.array(list(range(0,P))))\n","    return np.dot(tp,pp2)"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"mNYcYlsUt9G6","executionInfo":{"status":"ok","timestamp":1624207478826,"user_tz":-330,"elapsed":30,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}}},"source":["def calcLocalDifferences(img,P,R):\n","    ld = np.zeros((img.shape[0],img.shape[1],P),dtype=np.float)\n","\n","    for y in range(0, len(img)):\n","        for x in range(0, len(img[0])):\n","            center = img[y,x]\n","            #pixels = getNeighboringPixels(img,R,P,x,y)              \n","            pixels = getNeighboringPixelsPaperVersion(img,R,P,x,y)              \n","            ld[y,x,0:P] = pixels-center\n","\n","    return ld"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"id":"3OerhXKwrOxL","executionInfo":{"status":"ok","timestamp":1624207479602,"user_tz":-330,"elapsed":29,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}}},"source":["def clbp_C_Operator(img):\n","    c = np.mean(img)\n","    return np.where(img >= c, 1, 0)\n"],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"id":"dJM-_7lgvc4H","executionInfo":{"status":"ok","timestamp":1624207479606,"user_tz":-330,"elapsed":28,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}}},"source":["def LDSMT(ld):\n","    sp = np.where(ld >= 0,1,-1)\n","    mp = np.absolute(ld)\n","    return sp, mp"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"id":"vIrrAGqrvu_k","executionInfo":{"status":"ok","timestamp":1624207481522,"user_tz":-330,"elapsed":18,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}}},"source":["def CLBP_S_riu2(sp,P):\n","    sp = np.where(sp >= 0, 1, 0)\n","    #sp_total = np.sum(sp,2)\n","    #u_value = calcTransitions(sp,P)\n","    #return np.where(u_value <= 2, sp_total, P+1)\n","    pp2 = 2**(np.array(list(range(0,P))))\n","    indexes = np.dot(sp,pp2)    \n","    return indexes"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"id":"RAbLNafVv21u","executionInfo":{"status":"ok","timestamp":1624207481523,"user_tz":-330,"elapsed":15,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}}},"source":["def CLBP_M_riu2(mp,P):\n","    c = np.mean(mp)\n","    tp = np.where(mp >= c, 1, 0)\n","    # pp2 = np.array([1]*P)\n","    # tp_total = np.dot(tp,pp2.T)\n","    # u_value = calcTransitions(tp,P)\n","    # return np.where(u_value <= 2, tp_total, P+1)\n","    pp2 = 2**(np.array(list(range(0,P))))\n","    indexes = np.dot(tp,pp2)    \n","    return indexes"],"execution_count":17,"outputs":[]},{"cell_type":"code","metadata":{"id":"W_9CFhNnwTN0","executionInfo":{"status":"ok","timestamp":1624207481524,"user_tz":-330,"elapsed":14,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}}},"source":["def genMappingTable(P):\n","    mapTable = np.zeros(2**P)\n","    numElms = P+2\n","    for i in range(0,2**P):\n","        msb = 128 & i\n","        lsb = 1 & i\n","        count = format(i, '#010b').count('01') + format(i, '#010b').count('10') + ((msb >> (P-1)) ^ lsb)\n","\n","        if count <= 2:\n","            mapTable[i] = bin(i).count('1')\n","        else:\n","            mapTable[i] = P+1\n","\n","    return mapTable"],"execution_count":18,"outputs":[]},{"cell_type":"code","metadata":{"id":"hWY9n6ViKBAt","executionInfo":{"status":"ok","timestamp":1624207482033,"user_tz":-330,"elapsed":26,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}}},"source":["def getNeighboringPixelsPaperVersion(img,R,P,x,y):\n","    pixels = []\n","\n","    indexes = np.array(list(range(0,P)),dtype=np.float)\n","    dy = -R * np.sin(2 * np.pi * indexes / P)\n","    dx = R * np.cos(2 * np.pi * indexes / P)\n","\n","    dy = np.where(abs(dy) < 5.0e-10, 0, dy)\n","    dx = np.where(abs(dx) < 5.0e-10, 0, dx)\n","\n","    for point in range(0, P):\n","        r = y + dy[point]\n","        c = x + dx[point]\n","\n","        fr = math.floor(r)\n","        fc = math.floor(c)\n","\n","        cr = math.ceil(r)\n","        cc = math.ceil(c)\n","        \n","        rr = np.round(r)\n","        rc = np.round(c)\n","\n","        if abs(c-rc) < 10e-7 and abs(r-rr) < 10e-7:\n","            pixels.append(get_pixel_else_0(img, int(r), int(c)))\n","        else:\n","            tr = r - fr\n","            tc = c - fc\n","\n","            w1 = (1 - tc) * (1 - tr)\n","            w2 =      tc  * (1 - tr)\n","            w3 = (1 - tc) *      tr \n","            w4 =      tc  *      tr \n","\n","            value = w1*get_pixel_else_0(img, fr, fc) + w2*get_pixel_else_0(img, fr, cc) + \\\n","                    w3*get_pixel_else_0(img, cr, fc) + w4*get_pixel_else_0(img, cr, cc)\n","\n","            pixels.append(value)\n","\n","    return pixels\n"],"execution_count":19,"outputs":[]},{"cell_type":"code","metadata":{"id":"KiZh8Qqeum0g","executionInfo":{"status":"ok","timestamp":1624207482968,"user_tz":-330,"elapsed":15,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}}},"source":["def chiSquared(p,q):\n","    return np.sum((p-q)**2/(p+q+1e-6))"],"execution_count":20,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"B3T9jGL870O3"},"source":["Import dataset"]},{"cell_type":"code","metadata":{"id":"EAMe7i1h5PjM","executionInfo":{"status":"ok","timestamp":1624207855501,"user_tz":-330,"elapsed":353609,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}}},"source":["aluminium_foil = glob.glob('/content/drive/MyDrive/PS I G3/Dataset/KTH-TIPS 2-a/KTH-TIPS2-a/aluminium_foil/sample_a/*.*')\n","brown_bread = glob.glob('/content/drive/MyDrive/PS I G3/Dataset/KTH-TIPS 2-a/KTH-TIPS2-a/brown_bread/sample_a/*.*')\n","corduroy = glob.glob('/content/drive/MyDrive/PS I G3/Dataset/KTH-TIPS 2-a/KTH-TIPS2-a/corduroy/sample_a/*.*')\n","cork = glob.glob('/content/drive/MyDrive/PS I G3/Dataset/KTH-TIPS 2-a/KTH-TIPS2-a/cork/sample_a/*.*')\n","cotton = glob.glob('/content/drive/MyDrive/PS I G3/Dataset/KTH-TIPS 2-a/KTH-TIPS2-a/cotton/sample_a/*.*')\n","cracker = glob.glob('/content/drive/MyDrive/PS I G3/Dataset/KTH-TIPS 2-a/KTH-TIPS2-a/cracker/sample_a/*.*')\n","lettuce_leaf = glob.glob('/content/drive/MyDrive/PS I G3/Dataset/KTH-TIPS 2-a/KTH-TIPS2-a/lettuce_leaf/sample_a/*.*')\n","linen = glob.glob('/content/drive/MyDrive/PS I G3/Dataset/KTH-TIPS 2-a/KTH-TIPS2-a/linen/sample_a/*.*')\n","white_bread = glob.glob('/content/drive/MyDrive/PS I G3/Dataset/KTH-TIPS 2-a/KTH-TIPS2-a/white_bread/sample_a/*.*')\n","wood = glob.glob('/content/drive/MyDrive/PS I G3/Dataset/KTH-TIPS 2-a/KTH-TIPS2-a/wood/sample_a/*.*')\n","wool = glob.glob('/content/drive/MyDrive/PS I G3/Dataset/KTH-TIPS 2-a/KTH-TIPS2-a/wool/sample_a/*.*')\n","\n","\n","# In[5]:\n","\n","\n","data = []\n","labels = []\n","j= 0\n","for i in aluminium_foil:\n","    if j>100:\n","        break\n","    image=tf.keras.preprocessing.image.load_img(i, color_mode=\"rgb\", target_size= (200,200))\n","    image=np.array(image)\n","    data.append(image)\n","    labels.append(0)\n","    j +=1\n","for i in brown_bread:\n","    if j>200:\n","        break\n","    image=tf.keras.preprocessing.image.load_img(i, color_mode=\"rgb\", target_size= (200,200))\n","    image=np.array(image)\n","    data.append(image)\n","    labels.append(1)\n","    j +=1\n","for i in corduroy:\n","    if j>300:\n","        break\n","    image=tf.keras.preprocessing.image.load_img(i, color_mode=\"rgb\", target_size= (200,200))\n","    image=np.array(image)\n","    data.append(image)\n","    labels.append(2)\n","    j +=1\n","for i in cork:\n","    if j>400:\n","        break\n","    image=tf.keras.preprocessing.image.load_img(i, color_mode=\"rgb\", target_size= (200,200))\n","    image=np.array(image)\n","    data.append(image)\n","    labels.append(3)\n","    j+=1\n","for i in cotton:\n","    if j>500 :\n","        break\n","    image=tf.keras.preprocessing.image.load_img(i, color_mode=\"rgb\", target_size= (200,200))\n","    image=np.array(image)\n","    data.append(image)\n","    labels.append(4)\n","    j+=1\n","for i in cracker:\n","    if j> 600:\n","        break\n","    image=tf.keras.preprocessing.image.load_img(i, color_mode=\"rgb\", target_size= (200,200))\n","    image=np.array(image)\n","    data.append(image)\n","    labels.append(5)\n","    j+=1\n","for i in lettuce_leaf:\n","    if j> 700:\n","        break\n","    image=tf.keras.preprocessing.image.load_img(i, color_mode=\"rgb\", target_size= (200,200))\n","    image=np.array(image)\n","    data.append(image)\n","    labels.append(6)\n","    j+=1\n","for i in linen:\n","    if j> 800:\n","        break\n","    image=tf.keras.preprocessing.image.load_img(i, color_mode=\"rgb\", target_size= (200,200))\n","    image=np.array(image)\n","    data.append(image)\n","    labels.append(7)\n","    j+=1\n","for i in white_bread:\n","    if j> 900:\n","        break\n","    image=tf.keras.preprocessing.image.load_img(i, color_mode=\"rgb\", target_size= (200,200))\n","    image=np.array(image)\n","    data.append(image)\n","    labels.append(8)\n","    j+=1\n","for i in wood:\n","    if j> 1000:\n","        break\n","    image=tf.keras.preprocessing.image.load_img(i, color_mode=\"rgb\", target_size= (200,200))\n","    image=np.array(image)\n","    data.append(image)\n","    labels.append(9)\n","    j+=1\n","for i in wool:\n","    if j> 1100:\n","        break\n","    image=tf.keras.preprocessing.image.load_img(i, color_mode=\"rgb\", target_size= (200,200))\n","    image=np.array(image)\n","    data.append(image)\n","    labels.append(10)\n","    j+=1\n","\n","data = np.array(data)\n","labels = np.array(labels)"],"execution_count":21,"outputs":[]},{"cell_type":"code","metadata":{"id":"5-AJdCNhF5pB","executionInfo":{"status":"ok","timestamp":1624207855617,"user_tz":-330,"elapsed":362,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}}},"source":["X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)"],"execution_count":22,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gOuXrhtnN1jz"},"source":["CLBP Github"]},{"cell_type":"markdown","metadata":{"id":"C6XvA3BSWNcl"},"source":["Train dataset histogram"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sxG_Gj4LrFl6","executionInfo":{"status":"ok","timestamp":1624214879541,"user_tz":-330,"elapsed":1048030,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}},"outputId":"d430710f-28f9-45d2-9676-828644045e64"},"source":["radius = 1\n","numPoints = 8\n","\n","clbp_s = []\n","clbp_m = []\n","clbp_mc = []\n","clbp_s_mc = []\n","clbp_sm = []\n","clbp_smc = []\n","\n","labels = []\n","\n","result_y_train_clbp_s = []\n","result_y_train_clbp_m = []\n","result_y_train_clbp_mc = []\n","result_y_train_clbp_s_mc = []\n","result_y_train_clbp_sm = []\n","result_y_train_clbp_smc = []\n","\n","nn_classifier_clbp_s = MultinomialNB()\n","nn_classifier_clbp_m = MultinomialNB()\n","nn_classifier_clbp_mc = MultinomialNB()\n","nn_classifier_clbp_s_mc = MultinomialNB()\n","nn_classifier_clbp_sm = MultinomialNB()\n","nn_classifier_clbp_smc = MultinomialNB()\n","\n","mappingTable = genMappingTable(numPoints)\n","\n","# train\n","i = 0\n","for imgdata in X_train:\n","    i+=1\n","    print(i)\n","\n","    img_bgr = imgdata\n","    height, width, channel = img_bgr.shape\n","    img_gray = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2GRAY)\n","    img = img_gray\n","    # print(\"height,width\",height,width)\n","    # cv2.imshow(\"img\",img)\n","    # cv2.waitKey(0)\n","    # cv2.destroyAllWindows()\n","    # img = img/255\n","    # img = (img-np.mean(img))/np.std(img)*20+128\n","\n","    dp = calcLocalDifferences(img,numPoints,radius)\n","    sp, mp = LDSMT(dp)\n","\n","    # CLBP_C\n","    clbp_c = clbp_C_Operator(img)\n","\n","    # CLBP_S_riu2\n","    clbp_s_riu2 = CLBP_S_riu2(sp,numPoints)\n","    mapped_clbp_s_riu2 = mappingTable[clbp_s_riu2]\n","    (hist_s, bins) = np.histogram(mapped_clbp_s_riu2.ravel(), bins=numPoints+2)\n","    clbp_s.append(hist_s.ravel())\n","    \n","    # CLBP_M_riu2\n","    clbp_m_riu2 = CLBP_M_riu2(mp,numPoints)\n","    mapped_clbp_m_riu2 = mappingTable[clbp_m_riu2]\n","    (hist_m, bins) = np.histogram(mapped_clbp_m_riu2.ravel(), bins=numPoints+2)\n","    clbp_m.append(hist_m.ravel())\n","\n","    # CLBP_M/C\n","    hist_mc, xedges, yedges = np.histogram2d(mapped_clbp_m_riu2.ravel(), clbp_c.ravel(),bins=[numPoints+2,2])\n","    clbp_mc.append(hist_mc.ravel())\n","\n","    # CLBP_S_M/C\n","    hist_s_mc = np.concatenate((hist_s,hist_mc.ravel()),axis=0)\n","    clbp_s_mc.append(hist_s_mc.ravel())\n","\n","    # CLBP_S/M\n","    hist_sm, xedges, yedges = np.histogram2d(mapped_clbp_s_riu2.ravel(),mapped_clbp_m_riu2.ravel(),bins=[numPoints+2,numPoints+2])\n","    clbp_sm.append(hist_sm.ravel())\n","\n","    # CLBP_S/M/C\n","    clbp_mc_sum = np.where(clbp_c > 0, clbp_m_riu2+numPoints+2, clbp_m_riu2)\n","    hist_smc, xedges, yedges = np.histogram2d(mapped_clbp_s_riu2.ravel(), clbp_mc_sum.ravel(),bins=[numPoints+2,2*(numPoints+2)])\n","    clbp_smc.append(hist_smc.ravel())\n","\n","\n","                \n","\n","\n"],"execution_count":23,"outputs":[{"output_type":"stream","text":["1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","154\n","155\n","156\n","157\n","158\n","159\n","160\n","161\n","162\n","163\n","164\n","165\n","166\n","167\n","168\n","169\n","170\n","171\n","172\n","173\n","174\n","175\n","176\n","177\n","178\n","179\n","180\n","181\n","182\n","183\n","184\n","185\n","186\n","187\n","188\n","189\n","190\n","191\n","192\n","193\n","194\n","195\n","196\n","197\n","198\n","199\n","200\n","201\n","202\n","203\n","204\n","205\n","206\n","207\n","208\n","209\n","210\n","211\n","212\n","213\n","214\n","215\n","216\n","217\n","218\n","219\n","220\n","221\n","222\n","223\n","224\n","225\n","226\n","227\n","228\n","229\n","230\n","231\n","232\n","233\n","234\n","235\n","236\n","237\n","238\n","239\n","240\n","241\n","242\n","243\n","244\n","245\n","246\n","247\n","248\n","249\n","250\n","251\n","252\n","253\n","254\n","255\n","256\n","257\n","258\n","259\n","260\n","261\n","262\n","263\n","264\n","265\n","266\n","267\n","268\n","269\n","270\n","271\n","272\n","273\n","274\n","275\n","276\n","277\n","278\n","279\n","280\n","281\n","282\n","283\n","284\n","285\n","286\n","287\n","288\n","289\n","290\n","291\n","292\n","293\n","294\n","295\n","296\n","297\n","298\n","299\n","300\n","301\n","302\n","303\n","304\n","305\n","306\n","307\n","308\n","309\n","310\n","311\n","312\n","313\n","314\n","315\n","316\n","317\n","318\n","319\n","320\n","321\n","322\n","323\n","324\n","325\n","326\n","327\n","328\n","329\n","330\n","331\n","332\n","333\n","334\n","335\n","336\n","337\n","338\n","339\n","340\n","341\n","342\n","343\n","344\n","345\n","346\n","347\n","348\n","349\n","350\n","351\n","352\n","353\n","354\n","355\n","356\n","357\n","358\n","359\n","360\n","361\n","362\n","363\n","364\n","365\n","366\n","367\n","368\n","369\n","370\n","371\n","372\n","373\n","374\n","375\n","376\n","377\n","378\n","379\n","380\n","381\n","382\n","383\n","384\n","385\n","386\n","387\n","388\n","389\n","390\n","391\n","392\n","393\n","394\n","395\n","396\n","397\n","398\n","399\n","400\n","401\n","402\n","403\n","404\n","405\n","406\n","407\n","408\n","409\n","410\n","411\n","412\n","413\n","414\n","415\n","416\n","417\n","418\n","419\n","420\n","421\n","422\n","423\n","424\n","425\n","426\n","427\n","428\n","429\n","430\n","431\n","432\n","433\n","434\n","435\n","436\n","437\n","438\n","439\n","440\n","441\n","442\n","443\n","444\n","445\n","446\n","447\n","448\n","449\n","450\n","451\n","452\n","453\n","454\n","455\n","456\n","457\n","458\n","459\n","460\n","461\n","462\n","463\n","464\n","465\n","466\n","467\n","468\n","469\n","470\n","471\n","472\n","473\n","474\n","475\n","476\n","477\n","478\n","479\n","480\n","481\n","482\n","483\n","484\n","485\n","486\n","487\n","488\n","489\n","490\n","491\n","492\n","493\n","494\n","495\n","496\n","497\n","498\n","499\n","500\n","501\n","502\n","503\n","504\n","505\n","506\n","507\n","508\n","509\n","510\n","511\n","512\n","513\n","514\n","515\n","516\n","517\n","518\n","519\n","520\n","521\n","522\n","523\n","524\n","525\n","526\n","527\n","528\n","529\n","530\n","531\n","532\n","533\n","534\n","535\n","536\n","537\n","538\n","539\n","540\n","541\n","542\n","543\n","544\n","545\n","546\n","547\n","548\n","549\n","550\n","551\n","552\n","553\n","554\n","555\n","556\n","557\n","558\n","559\n","560\n","561\n","562\n","563\n","564\n","565\n","566\n","567\n","568\n","569\n","570\n","571\n","572\n","573\n","574\n","575\n","576\n","577\n","578\n","579\n","580\n","581\n","582\n","583\n","584\n","585\n","586\n","587\n","588\n","589\n","590\n","591\n","592\n","593\n","594\n","595\n","596\n","597\n","598\n","599\n","600\n","601\n","602\n","603\n","604\n","605\n","606\n","607\n","608\n","609\n","610\n","611\n","612\n","613\n","614\n","615\n","616\n","617\n","618\n","619\n","620\n","621\n","622\n","623\n","624\n","625\n","626\n","627\n","628\n","629\n","630\n","631\n","632\n","633\n","634\n","635\n","636\n","637\n","638\n","639\n","640\n","641\n","642\n","643\n","644\n","645\n","646\n","647\n","648\n","649\n","650\n","651\n","652\n","653\n","654\n","655\n","656\n","657\n","658\n","659\n","660\n","661\n","662\n","663\n","664\n","665\n","666\n","667\n","668\n","669\n","670\n","671\n","672\n","673\n","674\n","675\n","676\n","677\n","678\n","679\n","680\n","681\n","682\n","683\n","684\n","685\n","686\n","687\n","688\n","689\n","690\n","691\n","692\n","693\n","694\n","695\n","696\n","697\n","698\n","699\n","700\n","701\n","702\n","703\n","704\n","705\n","706\n","707\n","708\n","709\n","710\n","711\n","712\n","713\n","714\n","715\n","716\n","717\n","718\n","719\n","720\n","721\n","722\n","723\n","724\n","725\n","726\n","727\n","728\n","729\n","730\n","731\n","732\n","733\n","734\n","735\n","736\n","737\n","738\n","739\n","740\n","741\n","742\n","743\n","744\n","745\n","746\n","747\n","748\n","749\n","750\n","751\n","752\n","753\n","754\n","755\n","756\n","757\n","758\n","759\n","760\n","761\n","762\n","763\n","764\n","765\n","766\n","767\n","768\n","769\n","770\n","771\n","772\n","773\n","774\n","775\n","776\n","777\n","778\n","779\n","780\n","781\n","782\n","783\n","784\n","785\n","786\n","787\n","788\n","789\n","790\n","791\n","792\n","793\n","794\n","795\n","796\n","797\n","798\n","799\n","800\n","801\n","802\n","803\n","804\n","805\n","806\n","807\n","808\n","809\n","810\n","811\n","812\n","813\n","814\n","815\n","816\n","817\n","818\n","819\n","820\n","821\n","822\n","823\n","824\n","825\n","826\n","827\n","828\n","829\n","830\n","831\n","832\n","833\n","834\n","835\n","836\n","837\n","838\n","839\n","840\n","841\n","842\n","843\n","844\n","845\n","846\n","847\n","848\n","849\n","850\n","851\n","852\n","853\n","854\n","855\n","856\n","857\n","858\n","859\n","860\n","861\n","862\n","863\n","864\n","865\n","866\n","867\n","868\n","869\n","870\n","871\n","872\n","873\n","874\n","875\n","876\n","877\n","878\n","879\n","880\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"OqemHH5O3N7I"},"source":["Fitting the dataset"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Fr2EpW7Rw9Qz","executionInfo":{"status":"ok","timestamp":1624214934590,"user_tz":-330,"elapsed":15,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}},"outputId":"fe482e44-ccb3-487e-9d3b-df3bbc12ca1d"},"source":["# fitting\n","print(\"Fitting the models\")\n","\n","# model = KNeighborsClassifier(n_neighbors = 1, weights='uniform', algorithm='auto', metric=chiSquared)\n","# model.fit(data,y_train)\n","\n","nn_classifier_clbp_s.fit(clbp_s,y_train)\n","nn_classifier_clbp_m.fit(clbp_m,y_train)\n","nn_classifier_clbp_mc.fit(clbp_mc,y_train)\n","nn_classifier_clbp_s_mc.fit(clbp_s_mc,y_train)\n","nn_classifier_clbp_sm.fit(clbp_sm,y_train)\n","nn_classifier_clbp_smc.fit(clbp_smc,y_train)\n","\n","result_labels_clbp_s = []\n","result_labels_clbp_m = []\n","result_labels_clbp_mc = []\n","result_labels_clbp_s_mc = []\n","result_labels_clbp_sm = []\n","result_labels_clbp_smc = []"],"execution_count":26,"outputs":[{"output_type":"stream","text":["Fitting the models\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"uF_0c707WEww"},"source":["Test dataset histogram\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5pVGEVT0tAoC","executionInfo":{"status":"ok","timestamp":1624216773719,"user_tz":-330,"elapsed":1833071,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}},"outputId":"de00c279-2212-48db-a9d8-e5c9d9861990"},"source":["\n","# test\n","print(\"Test steps:\")\n","i = 0\n","for imgdata in X_test:\n","    print(i)\n","    # image_file = '/content/00000'+str(i)+'.bmp'\n","    img_bgr = imgdata\n","    height, width, channel = img_bgr.shape\n","    img_gray = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2GRAY)\n","    img = img_gray\n","    dp = calcLocalDifferences(img,numPoints,radius)\n","    sp, mp = LDSMT(dp)\n","\n","    # CLBP_C\n","    clbp_c = clbp_C_Operator(img)\n","\n","    # CLBP_S_riu2\n","    clbp_s_riu2 = CLBP_S_riu2(sp,numPoints)\n","    mapped_clbp_s_riu2 = mappingTable[clbp_s_riu2]\n","    (hist_s, bins) = np.histogram(mapped_clbp_s_riu2.ravel(), bins=numPoints+2)\n","    result_labels_clbp_s.append((y_test[i],\n","        nn_classifier_clbp_s.predict([hist_s.ravel()])))\n","    \n","    # CLBP_M_riu2\n","    clbp_m_riu2 = CLBP_M_riu2(mp,numPoints)\n","    mapped_clbp_m_riu2 = mappingTable[clbp_m_riu2]\n","    (hist_m, bins) = np.histogram(mapped_clbp_m_riu2.ravel(), bins=numPoints+2)\n","    result_labels_clbp_m.append((y_test[i],\n","        nn_classifier_clbp_m.predict([hist_m.ravel()])))\n","\n","\n","    # CLBP_M/C\n","    hist_mc, xedges, yedges = np.histogram2d(mapped_clbp_m_riu2.ravel(), clbp_c.ravel(),bins=[numPoints+2,2])\n","    result_labels_clbp_mc.append((y_test[i],\n","        nn_classifier_clbp_mc.predict([hist_mc.ravel()])))\n","\n","    # CLBP_S_M/C\n","    hist_s_mc = np.concatenate((hist_s,hist_mc.ravel()),axis=0)\n","    result_labels_clbp_s_mc.append((y_test[i],\n","        nn_classifier_clbp_s_mc.predict([hist_s_mc.ravel()])))\n","\n","    # CLBP_S/M\n","    hist_sm, xedges, yedges = np.histogram2d(mapped_clbp_s_riu2.ravel(),mapped_clbp_m_riu2.ravel(),bins=[numPoints+2,numPoints+2])\n","    result_labels_clbp_sm.append((y_test[i],\n","        nn_classifier_clbp_sm.predict([hist_sm.ravel()])))\n","\n","    # CLBP_S/M/C\n","    clbp_mc_sum = np.where(clbp_c > 0, clbp_m_riu2+numPoints+2, clbp_m_riu2)\n","    hist_smc, xedges, yedges = np.histogram2d(mapped_clbp_s_riu2.ravel(), clbp_mc_sum.ravel(),bins=[numPoints+2,2*(numPoints+2)])\n","    result_labels_clbp_smc.append((y_test[i],\n","        nn_classifier_clbp_smc.predict([hist_smc.ravel()])))\n","    \n","    i+=1"],"execution_count":27,"outputs":[{"output_type":"stream","text":["Test steps:\n","0\n","1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n","101\n","102\n","103\n","104\n","105\n","106\n","107\n","108\n","109\n","110\n","111\n","112\n","113\n","114\n","115\n","116\n","117\n","118\n","119\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","129\n","130\n","131\n","132\n","133\n","134\n","135\n","136\n","137\n","138\n","139\n","140\n","141\n","142\n","143\n","144\n","145\n","146\n","147\n","148\n","149\n","150\n","151\n","152\n","153\n","154\n","155\n","156\n","157\n","158\n","159\n","160\n","161\n","162\n","163\n","164\n","165\n","166\n","167\n","168\n","169\n","170\n","171\n","172\n","173\n","174\n","175\n","176\n","177\n","178\n","179\n","180\n","181\n","182\n","183\n","184\n","185\n","186\n","187\n","188\n","189\n","190\n","191\n","192\n","193\n","194\n","195\n","196\n","197\n","198\n","199\n","200\n","201\n","202\n","203\n","204\n","205\n","206\n","207\n","208\n","209\n","210\n","211\n","212\n","213\n","214\n","215\n","216\n","217\n","218\n","219\n","220\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"h6Vji5Xh6WuC"},"source":["Only combined MS histogram"]},{"cell_type":"code","metadata":{"id":"pimX9uWBYLj7"},"source":["from sklearn.neighbors import KNeighborsClassifier\n","neigh = KNeighborsClassifier(n_neighbors=5)\n","neigh.fit(hist_clbp_ms, y_train)\n","cv2_imshow(X_test[4])\n","x_test_12 = cv2.cvtColor(X_test[4], cv2.COLOR_BGR2GRAY)\n","cv2_imshow(x_test_12)\n","print(neigh.predict([hist_clbp_ms_test[4]]))\n","acc_ms = neigh.score(hist_clbp_ms_test, y_test)\n","# print(neigh.summary())\n","print(\"[INFO] histogram accuracy: {:.2f}%\".format(acc_ms * 100))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"m506w6ow6bz0"},"source":["only S histogram"]},{"cell_type":"code","metadata":{"id":"Pd4jTTbq5knL"},"source":["from sklearn.neighbors import KNeighborsClassifier\n","neigh = KNeighborsClassifier(n_neighbors=5)\n","neigh.fit(clbp_s, y_train)\n","cv2_imshow(X_test[4])\n","x_test_12 = cv2.cvtColor(X_test[4], cv2.COLOR_BGR2GRAY)\n","cv2_imshow(x_test_12)\n","\n","print(neigh.predict([clbp_s_test[4]]))\n","acc_s = neigh.score(clbp_s_test, y_test)\n","# print(neigh.summary())\n","print(\"[INFO] histogram accuracy: {:.2f}%\".format(acc_s * 100))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HzdWylyh1RaQ"},"source":["Predictions results for CLBP_S_riu2"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8FzknkHX1loa","executionInfo":{"status":"ok","timestamp":1624216773728,"user_tz":-330,"elapsed":155,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}},"outputId":"4612c3e6-b4cf-45c9-8987-1a65a6363e47"},"source":["pred = 0\n","numTest = X_test.shape[0]\n","for j in range(numTest):\n","    pred += (int(result_labels_clbp_s[j][0] == result_labels_clbp_s[j][1][0]))\n","    \n","print('predictions =',pred)\n","print('accuracy =',pred/(numTest)*100)"],"execution_count":28,"outputs":[{"output_type":"stream","text":["predictions = 121\n","accuracy = 54.75113122171946\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ArA762s71b4p"},"source":["Predictions results for CLBP_M_riu2"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mlxsJG-s1mfQ","executionInfo":{"status":"ok","timestamp":1624216773731,"user_tz":-330,"elapsed":138,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}},"outputId":"3dc14d78-4a78-4bda-8358-abace9467cce"},"source":["pred = 0\n","numTest = X_test.shape[0]\n","for j in range(numTest):\n","    pred += (int(result_labels_clbp_m[j][0] == result_labels_clbp_m[j][1][0]))\n","    \n","print('predictions =',pred)\n","print('accuracy =',pred/(numTest)*100)"],"execution_count":29,"outputs":[{"output_type":"stream","text":["predictions = 130\n","accuracy = 58.82352941176471\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"yfpWvjMZ1cQb"},"source":["Predictions results for CLBP_M/C"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i6YynrFr1nI3","executionInfo":{"status":"ok","timestamp":1624216773735,"user_tz":-330,"elapsed":129,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}},"outputId":"7d670f65-4e5b-4d14-a3e7-49725f48126c"},"source":["pred = 0\n","numTest = X_test.shape[0]\n","for j in range(numTest):\n","    pred += (int(result_labels_clbp_mc[j][0] == result_labels_clbp_mc[j][1][0]))\n","    \n","print('predictions =',pred)\n","print('accuracy =',pred/(numTest)*100)"],"execution_count":30,"outputs":[{"output_type":"stream","text":["predictions = 152\n","accuracy = 68.77828054298642\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"FSY7_R4R1cZG"},"source":["Predictions results for CLBP_S_M/C"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ccYKEV6z1oBK","executionInfo":{"status":"ok","timestamp":1624216773739,"user_tz":-330,"elapsed":124,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}},"outputId":"5f10b5af-1688-40c0-87ca-a8e953615eaf"},"source":["pred = 0\n","numTest = X_test.shape[0]\n","for j in range(numTest):\n","    pred += (int(result_labels_clbp_s_mc[j][0] == result_labels_clbp_s_mc[j][1][0]))\n","    \n","print('predictions =',pred)\n","print('accuracy =',pred/(numTest)*100)"],"execution_count":31,"outputs":[{"output_type":"stream","text":["predictions = 160\n","accuracy = 72.39819004524887\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"d6sP1_PG1cfb"},"source":["Predictions results for CLBP_S/M"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XQyGuOX91ov7","executionInfo":{"status":"ok","timestamp":1624216773742,"user_tz":-330,"elapsed":117,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}},"outputId":"495c9382-a5cc-48a6-d9d0-66025fd861c3"},"source":["pred = 0\n","numTest = X_test.shape[0]\n","for j in range(numTest):\n","    pred += (int(result_labels_clbp_sm[j][0] == result_labels_clbp_smc[j][1][0]))\n","    \n","print('predictions =',pred)\n","print('accuracy =',pred/(numTest)*100)"],"execution_count":32,"outputs":[{"output_type":"stream","text":["predictions = 167\n","accuracy = 75.56561085972851\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Q1hdnqzsvlvA"},"source":["Predictions results for CLBP_S/M/C"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"k1soSv-DvjQ4","executionInfo":{"status":"ok","timestamp":1624216773747,"user_tz":-330,"elapsed":113,"user":{"displayName":"NEIL PARESH MEHTA","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhsKd7M0H1Ghtta64n6eNaGRg03HOsuCRSk0KNj1A=s64","userId":"02534006225616056494"}},"outputId":"0ad758c0-aed3-4de9-d083-0d80c188f110"},"source":["pred = 0\n","numTest = X_test.shape[0]\n","for j in range(numTest):\n","    pred += (int(result_labels_clbp_smc[j][0] == result_labels_clbp_smc[j][1][0]))\n","    \n","print('predictions =',pred)\n","print('accuracy =',pred/(numTest)*100)"],"execution_count":33,"outputs":[{"output_type":"stream","text":["predictions = 167\n","accuracy = 75.56561085972851\n"],"name":"stdout"}]}]}